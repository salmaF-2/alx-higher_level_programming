The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

Importing the function from the module:
        >>> add_integer = __import__("0-add_integer").add_integer

Checking for module docstring:
         >>> m = __import__("0-add_integer").__doc__
         >>> len(m) > 1
         True

Checking for function docstring:
         >>> f = __import__("0-add_integer").add_integer.__doc__
         >>> len(f) > 1
         True

regular addition:
         >>> add_integer(2, 3)
         5

positive with negative:
         >>> add_integer(2, -4)
         -2

negative with positive:
         >>> add_integer(-6, 8)
         2

one arg:
         >>> add_integer(5)
         103

both float:
         >>> add_integer(4.5, 1.5)
         6

one float arg:
         >>> add_integer(10.7)
         108

addition over multiple values:
         >>> [add_integer(i, i ** 2) for i in range(6)]
         [0, 2, 6, 12, 20, 30]

float with int:
         >>> add_integer(2.1, 4)
         6

int with float:
         >>> add_integer(5, 7.8)
         12

super long int:
         >>> add_integer(999999999999999999999999999999, 1)
         1000000000000000000000000000000

passed NaN:
         >>> add_integer(1, float('nan'))
         Traceback (most recent call last):
         ...
         ValueError: cannot convert float NaN to integer

passed inf:
         >>> add_integer(1, float('inf'))
         Traceback (most recent call last):
         ...
         OverflowError: cannot convert float infinity to integer

non-number with number:
         >>> add_integer([1], 2)
         Traceback (most recent call last):
         ...
         TypeError: a must be an integer

number with non-number:
         >>> add_integer(3, "2")
         Traceback (most recent call last):
         ...
         TypeError: b must be an integer

non-number with non-number:
         >>> add_integer((2,), {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: a must be an integer

bool with number:
         >>> add_integer(True, 1)
         Traceback (most recent call last):
         ...
         TypeError: a must be an integer

number with bool:
         >>> add_integer(0, False)
         Traceback (most recent call last):
         ...
         TypeError: b must be an integer

no args:
         >>> add_integer()
         Traceback (most recent call last):
         ...
         TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

more than 2 args:
         >>> add_integer(1, 2, 3)
         Traceback (most recent call last):
         ...
         TypeError: add_integer() takes 2 positional arguments but 3 were given
